const jwt = require('jsonwebtoken');
const Category = require('../models/Category');
const Product = require('../models/Product');

// ðŸ”¹ Admin Login
// (replace with your real Admin model + password hashing if you have one)
const adminLogin = async (req, res) => {
  try {
    const { email, password } = req.body;

    // Dummy login check â€” replace with DB check
    if (email !== process.env.ADMIN_EMAIL || password !== process.env.ADMIN_PASSWORD) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    // Generate JWT
    const token = jwt.sign({ role: 'admin' }, process.env.JWT_SECRET, { expiresIn: '1d' });
    res.json({ token });
  } catch (err) {
    res.status(500).json({ message: 'Server error', error: err.message });
  }
};

// ðŸ”¹ Middleware: Authenticate Admin
const authAdmin = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader) return res.status(401).json({ message: 'No token provided' });

  const token = authHeader.split(' ')[1];
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    if (decoded.role !== 'admin') {
      return res.status(403).json({ message: 'Forbidden' });
    }
    req.admin = decoded;
    next();
  } catch (err) {
    res.status(401).json({ message: 'Invalid or expired token' });
  }
};

// ðŸ”¹ Category CRUD
const createCategory = async (req, res) => {
  try {
    const { name } = req.body;
    const slug = name.trim().toLowerCase().replace(/\s+/g, '-');
    const cat = await Category.create({ name, slug });
    res.status(201).json(cat);
  } catch (e) {
    res.status(400).json({ message: e.message });
  }
};

const listCategories = async (_req, res) => {
  const cats = await Category.find().sort('name');
  res.json(cats);
};

const updateCategory = async (req, res) => {
  try {
    const { id } = req.params;
    const { name } = req.body;
    const slug = name.trim().toLowerCase().replace(/\s+/g, '-');
    const cat = await Category.findByIdAndUpdate(id, { name, slug }, { new: true });
    res.json(cat);
  } catch (e) {
    res.status(400).json({ message: e.message });
  }
};

const deleteCategory = async (req, res) => {
  await Category.findByIdAndDelete(req.params.id);
  res.json({ ok: true });
};

// ðŸ”¹ Product CRUD
const createProduct = async (req, res) => {
  try {
    const prod = await Product.create(req.body);
    res.status(201).json(prod);
  } catch (e) {
    res.status(400).json({ message: e.message });
  }
};

const listProducts = async (req, res) => {
  const { q, category } = req.query;
  const filter = {};
  if (q) filter.name = { $regex: q, $options: 'i' };
  if (category) filter.category = category;

  const prods = await Product.find(filter).populate('category').sort('-createdAt');
  res.json(prods);
};

const getProduct = async (req, res) => {
  const prod = await Product.findById(req.params.id).populate('category');
  if (!prod) return res.status(404).json({ message: 'Not Found' });
  res.json(prod);
};

const updateProduct = async (req, res) => {
  try {
    const prod = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true });
    res.json(prod);
  } catch (e) {
    res.status(400).json({ message: e.message });
  }
};

const deleteProduct = async (req, res) => {
  await Product.findByIdAndDelete(req.params.id);
  res.json({ ok: true });
};

// ðŸ”¹ Export all
module.exports = {
  adminLogin,
  authAdmin,
  createCategory,
  listCategories,
  updateCategory,
  deleteCategory,
  createProduct,
  listProducts,
  getProduct,
  updateProduct,
  deleteProduct,
};
